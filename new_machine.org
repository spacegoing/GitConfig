* New Machine
** Manually
*** SSH
1. ~ssh-keygen -t rsa -b 4096 -C spacegoing@gmail.com~
2. run ~eval "$(ssh-agent -s)"~
3. AddKeysToAgent
    #+BEGIN_SRC ssh
    Host *
      AddKeysToAgent yes
      UseKeychain yes # (macos)
      IdentityFile ~/.ssh/id_rsa
    #+END_SRC
4. ~ssh-add -K ~/.ssh/id_rsa~ (macos); ~ssh-add ~/.ssh/id_rsa~ (linux)
5. add local to server ~ssh-copy-id <server>~
*** Git
0. Install
  #+BEGIN_SRC bash
  sudo apt-add-repository ppa:git-core/ppa
  sudo apt-get update
  sudo apt-get install git
  #+END_SRC
1. Add Name Email
  #+BEGIN_SRC bash
  git config --global user.name spacegoing
  git config --global user.email "spacegoing@gmail.com"
  #+END_SRC
2. Add public key to github
*** Git clone GitConfig
*** python
1. Use Mamba with Python LSP Instead
   1. For Conda + Non-LSP Linter / Formater
   2. - wget https://www.anaconda.com/download/****
      - bash **.sh
   3. ln -s GitConfig/python/.config to ~/
   4. pylint (pip install pylint and export
      PATH=/home/chli4934/.local/bin:$PATH )
   5. yapf (pip)
   6. install ~mamba~ instead of ~conda~: ~conda install mamba -n
      base -c conda-forge~
2. config ipython pdb to auto start: ~ipython profile create~;
   then set ~c.InteractiveShell.pdb = True~
**** China Mirrors
#+begin_src bash
  conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ && \
  conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ && \
  conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ && \
  conda config --set show_channel_urls yes
#+end_src
*** Install emacs

  #+BEGIN_SRC bash
  conda install -c conda-forge emacs
  #+END_SRC

  #+BEGIN_SRC bash
  sudo add-apt-repository ppa:kelleyk/emacs
  sudo apt-get update
  sudo apt install emacs28
  #+END_SRC
*** Spacemacs
1. install emacs
2. clone spacemacs repo
3. ln -s .spacemacs.clean to init.el
4. ln -s spacemacs to ~/.spacemacs.d
5. install ag
  - ~conda install -c conda-forge the_silver_searcher~
6. emacs in terminal
7. install source code pro font using install_source.sh in
   spacemacs dir
**** language-server setup
1. [no need for linux docker]install nvm -> node/npm
2. install python server
   #+begin_src bash
    pip install python-lsp-server
    # pip install pyright
    pip install importmagic epc
   #+end_src

**** Using ruff
***** config file path:
  #+BEGIN_SRC text
    # https://docs.astral.sh/ruff/configuration/#config-file-discovery
    Linux	$XDG_CONFIG_HOME or $HOME/.config
    macOS	$HOME/Library/Application Support
    Windows	{FOLDERID_RoamingAppData}
  #+END_SRC

***** 

*** (Space)emacs bugs
**** font bugs
execute ~all-the-icons-install-fonts~

**** python mode completion navigation ... stop working
1. ~*anaconda mode*~ buffer has log info
2. ~conda update json-rpc~
3. ~conda update jedi~
4. check Ipython version, might be version issue. check using
   python works.

**** orgmode bugs emacs 28.2
- https://github.com/syl20bnr/spacemacs/issues/15896
  - reinstall orgmode with: ~cd ~/.emacs.d; rm -rf elpa/28.2/develop/org-9*~

*** .bin
1. See ~setup_bin_spacemacs_tmux.sh~
   1. check if ~/bin in path
   2. ln -s .bin/files to ~/bin

**** pyservesg
- pyservesg depends on =pip install uploadserver=
- use together with aray (ssh forward port -L option)
- http://localhost:4411/upload for uploading
- http://localhost:4411 for visiting files

*** docker
- PostInstall: add user to sudo group:
  https://docs.docker.com/engine/install/linux-postinstall/
  sometimes have to restart rather than log out
- docker compose: ~docker compose version~ making sure its installed
- ~sudo vi /etc/docker/daemon.json~ and ~sudo systemctl start docker~:
#+begin_src json
  # /etc/docker/daemon.json
    {
      "runtimes": {
          "nvidia": {
              "args": [],
              "path": "nvidia-container-runtime"
          }
      },
        # docker bridge IP conflicts
    "bip": "172.1.0.1/16",
        # In China, choose one
    "registry-mirrors": [
        "https://dockerproxy.com",
        "https://hub-mirror.c.163.com",
        "https://mirror.baidubce.com",
        "https://ccr.ccs.tencentyun.com"
    ],
        # Must, change docker image place
    "data-root": "/home/jddesk/docker_volumes"
  }
#+end_src

*** Nvidia Container Tools
- NV Driver:
  - Preinstall deps: https://docs.nvidia.com/cuda/cuda-installation-guide-linux/#install-third-party-libraries
        #+begin_src bash
        sudo apt-get install -y build-essential
        # keep below updated
        sudo apt-get install g++-12 gcc-12
        sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libglu1-mesa-dev libfreeimage-dev libglfw3-dev
        #+end_src
  - https://docs.nvidia.com/datacenter/tesla/driver-installation-guide/index.html#ubuntu
        #+begin_src bash
            distro=ubuntu2204
            arch=x86_64
            sudo apt install linux-headers-$(uname -r) -y
            wget https://developer.download.nvidia.com/compute/cuda/repos/$distro/$arch/cuda-keyring_1.1-1_all.deb
            sudo dpkg -i cuda-keyring_1.1-1_all.deb
            sudo apt update
            sudo apt install cuda-drivers -y
            sudo reboot
            
            # POST INSTALL
            # systemctl status nvidia-persistenced.service
            # sudo systemctl restart nvidia-persistenced.service
        #+end_src
- Install Container Toolkit
  - Install: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html
  - Config: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html#configuring-docker
        #+begin_src bash
        sudo nvidia-ctk runtime configure --runtime=docker
        sudo systemctl restart docker
        #+end_src
  - Test ~docker run --rm --runtime=nvidia --gpus all nvidia/cuda:11.6.2-base-ubuntu20.04 nvidia-smi~

**** (On DGX) CUDA get device count bug:

DGX CUDA needs installing two plugins:

- Setting up NVIDIA Repo

 - Updating the CUDA Linux GPG Repository Key | NVIDIA Technical Blog
   https://developer.nvidia.com/blog/updating-the-cuda-linux-gpg-repository-key/

 - NVIDIA Repo:
   http://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/

  - In case of conflicts:
    - ~grep "nvidia.github.io" /etc/apt/sources.list.d/*~
    - ~grep -l "nvidia.github.io" /etc/apt/sources.list.d/* | grep
      -vE "/nvidia-container-toolkit.list\$" | sudo xargs rm -rf~

- Install DGX Data Center Maneger DCMG

   (two plugins) Notes on using NVIDIA A100 (40GB) - Deep Learning - fast.ai Course Forums
   https://forums.fast.ai/t/notes-on-using-nvidia-a100-40gb/89894

   (MIG Mode, unused) CUDA initialization: Unexpected error from cudaGetDeviceCount(),Torch.cuda.is_available() returns False with cuda11.6 or (cuda10.2),How do I solve it? - vision - PyTorch Forums
   https://discuss.pytorch.org/t/cuda-initialization-unexpected-error-from-cudagetdevicecount-torch-cuda-is-available-returns-false-with-cuda11-6-or-cuda10-2-how-do-i-solve-it/156729

   A100 GPUs visible on nvidia-smi not visible for Pytorch or on cuda-samples - Graphics / Linux / Linux - NVIDIA Developer Forums
   https://forums.developer.nvidia.com/t/a100-gpus-visible-on-nvidia-smi-not-visible-for-pytorch-or-on-cuda-samples/169805/3

**** sources.list not correctly setup bug

#+begin_src bash
echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /" | sudo tee /etc/apt/sources.list.d/cuda.list

sudo apt-get update returns no public key:
jddesk@jdDesktop:~$ sudo apt-get update
Hit:1 https://mirrors.tuna.tsinghua.edu.cn/ubuntu focal InRelease
Hit:2 https://mirrors.tuna.tsinghua.edu.cn/ubuntu focal-updates InRelease                         
Hit:3 https://mirrors.tuna.tsinghua.edu.cn/ubuntu focal-backports InRelease                       
Hit:4 http://security.ubuntu.com/ubuntu focal-security InRelease                                  
Get:5 https://developer.download.nvidia.cn/compute/cuda/repos/ubuntu2004/x86_64  InRelease [1,581 B]
Err:5 https://developer.download.nvidia.cn/compute/cuda/repos/ubuntu2004/x86_64  InRelease
  The following signatures couldn't be verified because the public key is not available: NO_PUBKEY A4B469963BF863CC
Reading package lists... Done
W: GPG error: https://developer.download.nvidia.cn/compute/cuda/repos/ubuntu2004/x86_64  InRelease: The following signatures couldn't be verified because the public key is not available: NO_PUBKEY A4B469963BF863CC
E: The repository 'https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64  InRelease' is not signed.
N: Updating from such a repository can't be done securely, and is therefore disabled by default.
N: See apt-secure(8) manpage for repository creation and user configuration details.

sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
sudo apt-get update
sudo apt-get install cuda-drivers
#+end_src


**** Unable to locate package nvidia-container-toolkit
- https://github.com/NVIDIA/nvidia-docker/issues/1238
- https://zhuanlan.zhihu.com/p/37519492

**** apt-get update conflicts
- Conflicting values set for option Signed-By error when running apt update
- https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/troubleshooting.html
*** tmux
1. install tmux
2. ln -s tmux.conf to ~/
3. fix tmux emacs theme: ~export TERM=xterm-256color~ to .profile

** SSH Clients
*** EternalTerminal
1. install et on server https://github.com/MisterTea/EternalTerminal
2. install et on macos
   #+begin_src bash
     # brew mirrors
     # https://mirrors.ustc.edu.cn/help/brew.git.html
     export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.ustc.edu.cn/brew.git"
   #+end_src
3. mac terminal ~export LC_CTYPE="en_US.UTF-8"~
4. aws
   - needs to add tcp port 2022 form 0.0.0.0/0 ::/0 rules to security group
   - needs to config .ssh with identity file
     #+begin_src bash
       Host tunehead
         Hostname 35.86.29.46
         User ubuntu
         IdentityFile ~/aws_ray_pt_head.pem
     #+end_src
5. usage
   #+begin_src bash
     et -t "4411:4411, 6006:6006, 8265:8265" tunehead
     # 4411 for pyservesg; 6006 for tensorboard; 8265 for ray server
     # -t "local:server"
   #+end_src
*** Mosh much faster than ET, but without port forward support
1. on server ~sudo apt-get install mosh~
2. mac ~brew install mosh~
3. mac terminal ~export LC_CTYPE="en_US.UTF-8"~
4. aws
   - needs to add tcp port 2022 form 0.0.0.0/0 ::/0 rules to security group
   - needs to config .ssh with identity file
     #+begin_src bash
       Host tunehead
         Hostname 35.86.29.46
         User ubuntu
         IdentityFile ~/aws_ray_pt_head.pem
     #+end_src
5. usage: ~mosh tunhead~
** MISC
*** CapsLock -> CTRL
- Linux: map caps to control: change the file ~sudo vi /etc/default/keyboard~ and change ~XKBOPTIONS="ctrl:nocaps"~.
  Run Jorge's command after that but as ~setxkbmap -option ctrl:nocaps~

** Docker Commands

*** mgdb
docker run -itd \
  --name mg \
  --user "$(id -u):$(id -g)" \
  -v ~/mg_data:/data/db \
  -p 27017:27017 \
  mongo



